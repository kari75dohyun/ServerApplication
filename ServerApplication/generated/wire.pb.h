// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: wire.proto
// Protobuf C++ Version: 5.29.5

#ifndef wire_2eproto_2epb_2eh
#define wire_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029005
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_wire_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_wire_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_wire_2eproto;
namespace wire {
class DbQueryResult;
struct DbQueryResultDefaultTypeInternal;
extern DbQueryResultDefaultTypeInternal _DbQueryResult_default_instance_;
class Envelope;
struct EnvelopeDefaultTypeInternal;
extern EnvelopeDefaultTypeInternal _Envelope_default_instance_;
class Error;
struct ErrorDefaultTypeInternal;
extern ErrorDefaultTypeInternal _Error_default_instance_;
class KeepaliveAck;
struct KeepaliveAckDefaultTypeInternal;
extern KeepaliveAckDefaultTypeInternal _KeepaliveAck_default_instance_;
class ServerLoginAck;
struct ServerLoginAckDefaultTypeInternal;
extern ServerLoginAckDefaultTypeInternal _ServerLoginAck_default_instance_;
}  // namespace wire
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace wire {
enum MsgType : int {
  UNKNOWN = 0,
  SERVER_LOGIN_ACK = 1,
  KEEPALIVE_ACK = 2,
  DB_QUERY_RESULT = 3,
  ERROR = 4,
  MsgType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  MsgType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool MsgType_IsValid(int value);
extern const uint32_t MsgType_internal_data_[];
constexpr MsgType MsgType_MIN = static_cast<MsgType>(0);
constexpr MsgType MsgType_MAX = static_cast<MsgType>(4);
constexpr int MsgType_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor*
MsgType_descriptor();
template <typename T>
const std::string& MsgType_Name(T value) {
  static_assert(std::is_same<T, MsgType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to MsgType_Name().");
  return MsgType_Name(static_cast<MsgType>(value));
}
template <>
inline const std::string& MsgType_Name(MsgType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<MsgType_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool MsgType_Parse(absl::string_view name, MsgType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MsgType>(
      MsgType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class ServerLoginAck final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:wire.ServerLoginAck) */ {
 public:
  inline ServerLoginAck() : ServerLoginAck(nullptr) {}
  ~ServerLoginAck() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ServerLoginAck* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ServerLoginAck));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ServerLoginAck(
      ::google::protobuf::internal::ConstantInitialized);

  inline ServerLoginAck(const ServerLoginAck& from) : ServerLoginAck(nullptr, from) {}
  inline ServerLoginAck(ServerLoginAck&& from) noexcept
      : ServerLoginAck(nullptr, std::move(from)) {}
  inline ServerLoginAck& operator=(const ServerLoginAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerLoginAck& operator=(ServerLoginAck&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServerLoginAck& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerLoginAck* internal_default_instance() {
    return reinterpret_cast<const ServerLoginAck*>(
        &_ServerLoginAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(ServerLoginAck& a, ServerLoginAck& b) { a.Swap(&b); }
  inline void Swap(ServerLoginAck* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerLoginAck* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServerLoginAck* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ServerLoginAck>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ServerLoginAck& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ServerLoginAck& from) { ServerLoginAck::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ServerLoginAck* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "wire.ServerLoginAck"; }

 protected:
  explicit ServerLoginAck(::google::protobuf::Arena* arena);
  ServerLoginAck(::google::protobuf::Arena* arena, const ServerLoginAck& from);
  ServerLoginAck(::google::protobuf::Arena* arena, ServerLoginAck&& from) noexcept
      : ServerLoginAck(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kResultFieldNumber = 1,
    kNicknameFieldNumber = 2,
  };
  // string result = 1;
  void clear_result() ;
  const std::string& result() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_result(Arg_&& arg, Args_... args);
  std::string* mutable_result();
  PROTOBUF_NODISCARD std::string* release_result();
  void set_allocated_result(std::string* value);

  private:
  const std::string& _internal_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result(
      const std::string& value);
  std::string* _internal_mutable_result();

  public:
  // string nickname = 2;
  void clear_nickname() ;
  const std::string& nickname() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_nickname(Arg_&& arg, Args_... args);
  std::string* mutable_nickname();
  PROTOBUF_NODISCARD std::string* release_nickname();
  void set_allocated_nickname(std::string* value);

  private:
  const std::string& _internal_nickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nickname(
      const std::string& value);
  std::string* _internal_mutable_nickname();

  public:
  // @@protoc_insertion_point(class_scope:wire.ServerLoginAck)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      42, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ServerLoginAck& from_msg);
    ::google::protobuf::internal::ArenaStringPtr result_;
    ::google::protobuf::internal::ArenaStringPtr nickname_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_wire_2eproto;
};
// -------------------------------------------------------------------

class KeepaliveAck final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:wire.KeepaliveAck) */ {
 public:
  inline KeepaliveAck() : KeepaliveAck(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(KeepaliveAck* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(KeepaliveAck));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR KeepaliveAck(
      ::google::protobuf::internal::ConstantInitialized);

  inline KeepaliveAck(const KeepaliveAck& from) : KeepaliveAck(nullptr, from) {}
  inline KeepaliveAck(KeepaliveAck&& from) noexcept
      : KeepaliveAck(nullptr, std::move(from)) {}
  inline KeepaliveAck& operator=(const KeepaliveAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeepaliveAck& operator=(KeepaliveAck&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KeepaliveAck& default_instance() {
    return *internal_default_instance();
  }
  static inline const KeepaliveAck* internal_default_instance() {
    return reinterpret_cast<const KeepaliveAck*>(
        &_KeepaliveAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(KeepaliveAck& a, KeepaliveAck& b) { a.Swap(&b); }
  inline void Swap(KeepaliveAck* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeepaliveAck* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KeepaliveAck* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<KeepaliveAck>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const KeepaliveAck& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const KeepaliveAck& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "wire.KeepaliveAck"; }

 protected:
  explicit KeepaliveAck(::google::protobuf::Arena* arena);
  KeepaliveAck(::google::protobuf::Arena* arena, const KeepaliveAck& from);
  KeepaliveAck(::google::protobuf::Arena* arena, KeepaliveAck&& from) noexcept
      : KeepaliveAck(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:wire.KeepaliveAck)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const KeepaliveAck& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_wire_2eproto;
};
// -------------------------------------------------------------------

class Error final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:wire.Error) */ {
 public:
  inline Error() : Error(nullptr) {}
  ~Error() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Error* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Error));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Error(
      ::google::protobuf::internal::ConstantInitialized);

  inline Error(const Error& from) : Error(nullptr, from) {}
  inline Error(Error&& from) noexcept
      : Error(nullptr, std::move(from)) {}
  inline Error& operator=(const Error& from) {
    CopyFrom(from);
    return *this;
  }
  inline Error& operator=(Error&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Error& default_instance() {
    return *internal_default_instance();
  }
  static inline const Error* internal_default_instance() {
    return reinterpret_cast<const Error*>(
        &_Error_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(Error& a, Error& b) { a.Swap(&b); }
  inline void Swap(Error* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Error* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Error* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Error>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Error& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Error& from) { Error::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Error* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "wire.Error"; }

 protected:
  explicit Error(::google::protobuf::Arena* arena);
  Error(::google::protobuf::Arena* arena, const Error& from);
  Error(::google::protobuf::Arena* arena, Error&& from) noexcept
      : Error(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kReqIdFieldNumber = 1,
    kMsgFieldNumber = 3,
    kCodeFieldNumber = 2,
  };
  // string req_id = 1;
  void clear_req_id() ;
  const std::string& req_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_req_id(Arg_&& arg, Args_... args);
  std::string* mutable_req_id();
  PROTOBUF_NODISCARD std::string* release_req_id();
  void set_allocated_req_id(std::string* value);

  private:
  const std::string& _internal_req_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_req_id(
      const std::string& value);
  std::string* _internal_mutable_req_id();

  public:
  // string msg = 3;
  void clear_msg() ;
  const std::string& msg() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_msg(Arg_&& arg, Args_... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* value);

  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(
      const std::string& value);
  std::string* _internal_mutable_msg();

  public:
  // int32 code = 2;
  void clear_code() ;
  ::int32_t code() const;
  void set_code(::int32_t value);

  private:
  ::int32_t _internal_code() const;
  void _internal_set_code(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:wire.Error)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      28, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Error& from_msg);
    ::google::protobuf::internal::ArenaStringPtr req_id_;
    ::google::protobuf::internal::ArenaStringPtr msg_;
    ::int32_t code_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_wire_2eproto;
};
// -------------------------------------------------------------------

class DbQueryResult final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:wire.DbQueryResult) */ {
 public:
  inline DbQueryResult() : DbQueryResult(nullptr) {}
  ~DbQueryResult() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(DbQueryResult* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(DbQueryResult));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DbQueryResult(
      ::google::protobuf::internal::ConstantInitialized);

  inline DbQueryResult(const DbQueryResult& from) : DbQueryResult(nullptr, from) {}
  inline DbQueryResult(DbQueryResult&& from) noexcept
      : DbQueryResult(nullptr, std::move(from)) {}
  inline DbQueryResult& operator=(const DbQueryResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline DbQueryResult& operator=(DbQueryResult&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DbQueryResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const DbQueryResult* internal_default_instance() {
    return reinterpret_cast<const DbQueryResult*>(
        &_DbQueryResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(DbQueryResult& a, DbQueryResult& b) { a.Swap(&b); }
  inline void Swap(DbQueryResult* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DbQueryResult* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DbQueryResult* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<DbQueryResult>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DbQueryResult& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DbQueryResult& from) { DbQueryResult::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(DbQueryResult* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "wire.DbQueryResult"; }

 protected:
  explicit DbQueryResult(::google::protobuf::Arena* arena);
  DbQueryResult(::google::protobuf::Arena* arena, const DbQueryResult& from);
  DbQueryResult(::google::protobuf::Arena* arena, DbQueryResult&& from) noexcept
      : DbQueryResult(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kReqIdFieldNumber = 1,
    kApiFieldNumber = 3,
    kDataJsonFieldNumber = 4,
    kCodeFieldNumber = 2,
  };
  // string req_id = 1;
  void clear_req_id() ;
  const std::string& req_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_req_id(Arg_&& arg, Args_... args);
  std::string* mutable_req_id();
  PROTOBUF_NODISCARD std::string* release_req_id();
  void set_allocated_req_id(std::string* value);

  private:
  const std::string& _internal_req_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_req_id(
      const std::string& value);
  std::string* _internal_mutable_req_id();

  public:
  // string api = 3;
  void clear_api() ;
  const std::string& api() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_api(Arg_&& arg, Args_... args);
  std::string* mutable_api();
  PROTOBUF_NODISCARD std::string* release_api();
  void set_allocated_api(std::string* value);

  private:
  const std::string& _internal_api() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_api(
      const std::string& value);
  std::string* _internal_mutable_api();

  public:
  // string data_json = 4;
  void clear_data_json() ;
  const std::string& data_json() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data_json(Arg_&& arg, Args_... args);
  std::string* mutable_data_json();
  PROTOBUF_NODISCARD std::string* release_data_json();
  void set_allocated_data_json(std::string* value);

  private:
  const std::string& _internal_data_json() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data_json(
      const std::string& value);
  std::string* _internal_mutable_data_json();

  public:
  // int32 code = 2;
  void clear_code() ;
  ::int32_t code() const;
  void set_code(::int32_t value);

  private:
  ::int32_t _internal_code() const;
  void _internal_set_code(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:wire.DbQueryResult)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      45, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const DbQueryResult& from_msg);
    ::google::protobuf::internal::ArenaStringPtr req_id_;
    ::google::protobuf::internal::ArenaStringPtr api_;
    ::google::protobuf::internal::ArenaStringPtr data_json_;
    ::int32_t code_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_wire_2eproto;
};
// -------------------------------------------------------------------

class Envelope final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:wire.Envelope) */ {
 public:
  inline Envelope() : Envelope(nullptr) {}
  ~Envelope() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Envelope* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Envelope));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Envelope(
      ::google::protobuf::internal::ConstantInitialized);

  inline Envelope(const Envelope& from) : Envelope(nullptr, from) {}
  inline Envelope(Envelope&& from) noexcept
      : Envelope(nullptr, std::move(from)) {}
  inline Envelope& operator=(const Envelope& from) {
    CopyFrom(from);
    return *this;
  }
  inline Envelope& operator=(Envelope&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Envelope& default_instance() {
    return *internal_default_instance();
  }
  enum PayloadCase {
    kServerLoginAck = 10,
    kKeepaliveAck = 11,
    kDbQueryResult = 12,
    kError = 13,
    PAYLOAD_NOT_SET = 0,
  };
  static inline const Envelope* internal_default_instance() {
    return reinterpret_cast<const Envelope*>(
        &_Envelope_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(Envelope& a, Envelope& b) { a.Swap(&b); }
  inline void Swap(Envelope* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Envelope* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Envelope* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Envelope>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Envelope& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Envelope& from) { Envelope::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Envelope* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "wire.Envelope"; }

 protected:
  explicit Envelope(::google::protobuf::Arena* arena);
  Envelope(::google::protobuf::Arena* arena, const Envelope& from);
  Envelope(::google::protobuf::Arena* arena, Envelope&& from) noexcept
      : Envelope(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTypeFieldNumber = 1,
    kServerLoginAckFieldNumber = 10,
    kKeepaliveAckFieldNumber = 11,
    kDbQueryResultFieldNumber = 12,
    kErrorFieldNumber = 13,
  };
  // .wire.MsgType type = 1;
  void clear_type() ;
  ::wire::MsgType type() const;
  void set_type(::wire::MsgType value);

  private:
  ::wire::MsgType _internal_type() const;
  void _internal_set_type(::wire::MsgType value);

  public:
  // .wire.ServerLoginAck server_login_ack = 10;
  bool has_server_login_ack() const;
  private:
  bool _internal_has_server_login_ack() const;

  public:
  void clear_server_login_ack() ;
  const ::wire::ServerLoginAck& server_login_ack() const;
  PROTOBUF_NODISCARD ::wire::ServerLoginAck* release_server_login_ack();
  ::wire::ServerLoginAck* mutable_server_login_ack();
  void set_allocated_server_login_ack(::wire::ServerLoginAck* value);
  void unsafe_arena_set_allocated_server_login_ack(::wire::ServerLoginAck* value);
  ::wire::ServerLoginAck* unsafe_arena_release_server_login_ack();

  private:
  const ::wire::ServerLoginAck& _internal_server_login_ack() const;
  ::wire::ServerLoginAck* _internal_mutable_server_login_ack();

  public:
  // .wire.KeepaliveAck keepalive_ack = 11;
  bool has_keepalive_ack() const;
  private:
  bool _internal_has_keepalive_ack() const;

  public:
  void clear_keepalive_ack() ;
  const ::wire::KeepaliveAck& keepalive_ack() const;
  PROTOBUF_NODISCARD ::wire::KeepaliveAck* release_keepalive_ack();
  ::wire::KeepaliveAck* mutable_keepalive_ack();
  void set_allocated_keepalive_ack(::wire::KeepaliveAck* value);
  void unsafe_arena_set_allocated_keepalive_ack(::wire::KeepaliveAck* value);
  ::wire::KeepaliveAck* unsafe_arena_release_keepalive_ack();

  private:
  const ::wire::KeepaliveAck& _internal_keepalive_ack() const;
  ::wire::KeepaliveAck* _internal_mutable_keepalive_ack();

  public:
  // .wire.DbQueryResult db_query_result = 12;
  bool has_db_query_result() const;
  private:
  bool _internal_has_db_query_result() const;

  public:
  void clear_db_query_result() ;
  const ::wire::DbQueryResult& db_query_result() const;
  PROTOBUF_NODISCARD ::wire::DbQueryResult* release_db_query_result();
  ::wire::DbQueryResult* mutable_db_query_result();
  void set_allocated_db_query_result(::wire::DbQueryResult* value);
  void unsafe_arena_set_allocated_db_query_result(::wire::DbQueryResult* value);
  ::wire::DbQueryResult* unsafe_arena_release_db_query_result();

  private:
  const ::wire::DbQueryResult& _internal_db_query_result() const;
  ::wire::DbQueryResult* _internal_mutable_db_query_result();

  public:
  // .wire.Error error = 13;
  bool has_error() const;
  private:
  bool _internal_has_error() const;

  public:
  void clear_error() ;
  const ::wire::Error& error() const;
  PROTOBUF_NODISCARD ::wire::Error* release_error();
  ::wire::Error* mutable_error();
  void set_allocated_error(::wire::Error* value);
  void unsafe_arena_set_allocated_error(::wire::Error* value);
  ::wire::Error* unsafe_arena_release_error();

  private:
  const ::wire::Error& _internal_error() const;
  ::wire::Error* _internal_mutable_error();

  public:
  void clear_payload();
  PayloadCase payload_case() const;
  // @@protoc_insertion_point(class_scope:wire.Envelope)
 private:
  class _Internal;
  void set_has_server_login_ack();
  void set_has_keepalive_ack();
  void set_has_db_query_result();
  void set_has_error();
  inline bool has_payload() const;
  inline void clear_has_payload();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 5, 4,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Envelope& from_msg);
    int type_;
    union PayloadUnion {
      constexpr PayloadUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::wire::ServerLoginAck* server_login_ack_;
      ::wire::KeepaliveAck* keepalive_ack_;
      ::wire::DbQueryResult* db_query_result_;
      ::wire::Error* error_;
    } payload_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_wire_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ServerLoginAck

// string result = 1;
inline void ServerLoginAck::clear_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.result_.ClearToEmpty();
}
inline const std::string& ServerLoginAck::result() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:wire.ServerLoginAck.result)
  return _internal_result();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ServerLoginAck::set_result(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.result_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:wire.ServerLoginAck.result)
}
inline std::string* ServerLoginAck::mutable_result() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:wire.ServerLoginAck.result)
  return _s;
}
inline const std::string& ServerLoginAck::_internal_result() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.result_.Get();
}
inline void ServerLoginAck::_internal_set_result(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.result_.Set(value, GetArena());
}
inline std::string* ServerLoginAck::_internal_mutable_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.result_.Mutable( GetArena());
}
inline std::string* ServerLoginAck::release_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:wire.ServerLoginAck.result)
  return _impl_.result_.Release();
}
inline void ServerLoginAck::set_allocated_result(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.result_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.result_.IsDefault()) {
    _impl_.result_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:wire.ServerLoginAck.result)
}

// string nickname = 2;
inline void ServerLoginAck::clear_nickname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nickname_.ClearToEmpty();
}
inline const std::string& ServerLoginAck::nickname() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:wire.ServerLoginAck.nickname)
  return _internal_nickname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ServerLoginAck::set_nickname(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nickname_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:wire.ServerLoginAck.nickname)
}
inline std::string* ServerLoginAck::mutable_nickname() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_nickname();
  // @@protoc_insertion_point(field_mutable:wire.ServerLoginAck.nickname)
  return _s;
}
inline const std::string& ServerLoginAck::_internal_nickname() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.nickname_.Get();
}
inline void ServerLoginAck::_internal_set_nickname(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nickname_.Set(value, GetArena());
}
inline std::string* ServerLoginAck::_internal_mutable_nickname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.nickname_.Mutable( GetArena());
}
inline std::string* ServerLoginAck::release_nickname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:wire.ServerLoginAck.nickname)
  return _impl_.nickname_.Release();
}
inline void ServerLoginAck::set_allocated_nickname(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nickname_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.nickname_.IsDefault()) {
    _impl_.nickname_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:wire.ServerLoginAck.nickname)
}

// -------------------------------------------------------------------

// KeepaliveAck

// -------------------------------------------------------------------

// DbQueryResult

// string req_id = 1;
inline void DbQueryResult::clear_req_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.req_id_.ClearToEmpty();
}
inline const std::string& DbQueryResult::req_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:wire.DbQueryResult.req_id)
  return _internal_req_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DbQueryResult::set_req_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.req_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:wire.DbQueryResult.req_id)
}
inline std::string* DbQueryResult::mutable_req_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_req_id();
  // @@protoc_insertion_point(field_mutable:wire.DbQueryResult.req_id)
  return _s;
}
inline const std::string& DbQueryResult::_internal_req_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.req_id_.Get();
}
inline void DbQueryResult::_internal_set_req_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.req_id_.Set(value, GetArena());
}
inline std::string* DbQueryResult::_internal_mutable_req_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.req_id_.Mutable( GetArena());
}
inline std::string* DbQueryResult::release_req_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:wire.DbQueryResult.req_id)
  return _impl_.req_id_.Release();
}
inline void DbQueryResult::set_allocated_req_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.req_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.req_id_.IsDefault()) {
    _impl_.req_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:wire.DbQueryResult.req_id)
}

// int32 code = 2;
inline void DbQueryResult::clear_code() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.code_ = 0;
}
inline ::int32_t DbQueryResult::code() const {
  // @@protoc_insertion_point(field_get:wire.DbQueryResult.code)
  return _internal_code();
}
inline void DbQueryResult::set_code(::int32_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:wire.DbQueryResult.code)
}
inline ::int32_t DbQueryResult::_internal_code() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.code_;
}
inline void DbQueryResult::_internal_set_code(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.code_ = value;
}

// string api = 3;
inline void DbQueryResult::clear_api() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.api_.ClearToEmpty();
}
inline const std::string& DbQueryResult::api() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:wire.DbQueryResult.api)
  return _internal_api();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DbQueryResult::set_api(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.api_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:wire.DbQueryResult.api)
}
inline std::string* DbQueryResult::mutable_api() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_api();
  // @@protoc_insertion_point(field_mutable:wire.DbQueryResult.api)
  return _s;
}
inline const std::string& DbQueryResult::_internal_api() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.api_.Get();
}
inline void DbQueryResult::_internal_set_api(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.api_.Set(value, GetArena());
}
inline std::string* DbQueryResult::_internal_mutable_api() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.api_.Mutable( GetArena());
}
inline std::string* DbQueryResult::release_api() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:wire.DbQueryResult.api)
  return _impl_.api_.Release();
}
inline void DbQueryResult::set_allocated_api(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.api_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.api_.IsDefault()) {
    _impl_.api_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:wire.DbQueryResult.api)
}

// string data_json = 4;
inline void DbQueryResult::clear_data_json() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_json_.ClearToEmpty();
}
inline const std::string& DbQueryResult::data_json() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:wire.DbQueryResult.data_json)
  return _internal_data_json();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DbQueryResult::set_data_json(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_json_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:wire.DbQueryResult.data_json)
}
inline std::string* DbQueryResult::mutable_data_json() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_data_json();
  // @@protoc_insertion_point(field_mutable:wire.DbQueryResult.data_json)
  return _s;
}
inline const std::string& DbQueryResult::_internal_data_json() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.data_json_.Get();
}
inline void DbQueryResult::_internal_set_data_json(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_json_.Set(value, GetArena());
}
inline std::string* DbQueryResult::_internal_mutable_data_json() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.data_json_.Mutable( GetArena());
}
inline std::string* DbQueryResult::release_data_json() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:wire.DbQueryResult.data_json)
  return _impl_.data_json_.Release();
}
inline void DbQueryResult::set_allocated_data_json(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_json_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.data_json_.IsDefault()) {
    _impl_.data_json_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:wire.DbQueryResult.data_json)
}

// -------------------------------------------------------------------

// Error

// string req_id = 1;
inline void Error::clear_req_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.req_id_.ClearToEmpty();
}
inline const std::string& Error::req_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:wire.Error.req_id)
  return _internal_req_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Error::set_req_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.req_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:wire.Error.req_id)
}
inline std::string* Error::mutable_req_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_req_id();
  // @@protoc_insertion_point(field_mutable:wire.Error.req_id)
  return _s;
}
inline const std::string& Error::_internal_req_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.req_id_.Get();
}
inline void Error::_internal_set_req_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.req_id_.Set(value, GetArena());
}
inline std::string* Error::_internal_mutable_req_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.req_id_.Mutable( GetArena());
}
inline std::string* Error::release_req_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:wire.Error.req_id)
  return _impl_.req_id_.Release();
}
inline void Error::set_allocated_req_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.req_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.req_id_.IsDefault()) {
    _impl_.req_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:wire.Error.req_id)
}

// int32 code = 2;
inline void Error::clear_code() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.code_ = 0;
}
inline ::int32_t Error::code() const {
  // @@protoc_insertion_point(field_get:wire.Error.code)
  return _internal_code();
}
inline void Error::set_code(::int32_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:wire.Error.code)
}
inline ::int32_t Error::_internal_code() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.code_;
}
inline void Error::_internal_set_code(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.code_ = value;
}

// string msg = 3;
inline void Error::clear_msg() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.msg_.ClearToEmpty();
}
inline const std::string& Error::msg() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:wire.Error.msg)
  return _internal_msg();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Error::set_msg(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.msg_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:wire.Error.msg)
}
inline std::string* Error::mutable_msg() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:wire.Error.msg)
  return _s;
}
inline const std::string& Error::_internal_msg() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.msg_.Get();
}
inline void Error::_internal_set_msg(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.msg_.Set(value, GetArena());
}
inline std::string* Error::_internal_mutable_msg() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.msg_.Mutable( GetArena());
}
inline std::string* Error::release_msg() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:wire.Error.msg)
  return _impl_.msg_.Release();
}
inline void Error::set_allocated_msg(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.msg_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.msg_.IsDefault()) {
    _impl_.msg_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:wire.Error.msg)
}

// -------------------------------------------------------------------

// Envelope

// .wire.MsgType type = 1;
inline void Envelope::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = 0;
}
inline ::wire::MsgType Envelope::type() const {
  // @@protoc_insertion_point(field_get:wire.Envelope.type)
  return _internal_type();
}
inline void Envelope::set_type(::wire::MsgType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:wire.Envelope.type)
}
inline ::wire::MsgType Envelope::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::wire::MsgType>(_impl_.type_);
}
inline void Envelope::_internal_set_type(::wire::MsgType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = value;
}

// .wire.ServerLoginAck server_login_ack = 10;
inline bool Envelope::has_server_login_ack() const {
  return payload_case() == kServerLoginAck;
}
inline bool Envelope::_internal_has_server_login_ack() const {
  return payload_case() == kServerLoginAck;
}
inline void Envelope::set_has_server_login_ack() {
  _impl_._oneof_case_[0] = kServerLoginAck;
}
inline void Envelope::clear_server_login_ack() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (payload_case() == kServerLoginAck) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.server_login_ack_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.server_login_ack_);
    }
    clear_has_payload();
  }
}
inline ::wire::ServerLoginAck* Envelope::release_server_login_ack() {
  // @@protoc_insertion_point(field_release:wire.Envelope.server_login_ack)
  if (payload_case() == kServerLoginAck) {
    clear_has_payload();
    auto* temp = _impl_.payload_.server_login_ack_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.server_login_ack_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::wire::ServerLoginAck& Envelope::_internal_server_login_ack() const {
  return payload_case() == kServerLoginAck ? *_impl_.payload_.server_login_ack_ : reinterpret_cast<::wire::ServerLoginAck&>(::wire::_ServerLoginAck_default_instance_);
}
inline const ::wire::ServerLoginAck& Envelope::server_login_ack() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:wire.Envelope.server_login_ack)
  return _internal_server_login_ack();
}
inline ::wire::ServerLoginAck* Envelope::unsafe_arena_release_server_login_ack() {
  // @@protoc_insertion_point(field_unsafe_arena_release:wire.Envelope.server_login_ack)
  if (payload_case() == kServerLoginAck) {
    clear_has_payload();
    auto* temp = _impl_.payload_.server_login_ack_;
    _impl_.payload_.server_login_ack_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Envelope::unsafe_arena_set_allocated_server_login_ack(::wire::ServerLoginAck* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_server_login_ack();
    _impl_.payload_.server_login_ack_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wire.Envelope.server_login_ack)
}
inline ::wire::ServerLoginAck* Envelope::_internal_mutable_server_login_ack() {
  if (payload_case() != kServerLoginAck) {
    clear_payload();
    set_has_server_login_ack();
    _impl_.payload_.server_login_ack_ =
        ::google::protobuf::Message::DefaultConstruct<::wire::ServerLoginAck>(GetArena());
  }
  return _impl_.payload_.server_login_ack_;
}
inline ::wire::ServerLoginAck* Envelope::mutable_server_login_ack() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::wire::ServerLoginAck* _msg = _internal_mutable_server_login_ack();
  // @@protoc_insertion_point(field_mutable:wire.Envelope.server_login_ack)
  return _msg;
}

// .wire.KeepaliveAck keepalive_ack = 11;
inline bool Envelope::has_keepalive_ack() const {
  return payload_case() == kKeepaliveAck;
}
inline bool Envelope::_internal_has_keepalive_ack() const {
  return payload_case() == kKeepaliveAck;
}
inline void Envelope::set_has_keepalive_ack() {
  _impl_._oneof_case_[0] = kKeepaliveAck;
}
inline void Envelope::clear_keepalive_ack() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (payload_case() == kKeepaliveAck) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.keepalive_ack_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.keepalive_ack_);
    }
    clear_has_payload();
  }
}
inline ::wire::KeepaliveAck* Envelope::release_keepalive_ack() {
  // @@protoc_insertion_point(field_release:wire.Envelope.keepalive_ack)
  if (payload_case() == kKeepaliveAck) {
    clear_has_payload();
    auto* temp = _impl_.payload_.keepalive_ack_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.keepalive_ack_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::wire::KeepaliveAck& Envelope::_internal_keepalive_ack() const {
  return payload_case() == kKeepaliveAck ? *_impl_.payload_.keepalive_ack_ : reinterpret_cast<::wire::KeepaliveAck&>(::wire::_KeepaliveAck_default_instance_);
}
inline const ::wire::KeepaliveAck& Envelope::keepalive_ack() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:wire.Envelope.keepalive_ack)
  return _internal_keepalive_ack();
}
inline ::wire::KeepaliveAck* Envelope::unsafe_arena_release_keepalive_ack() {
  // @@protoc_insertion_point(field_unsafe_arena_release:wire.Envelope.keepalive_ack)
  if (payload_case() == kKeepaliveAck) {
    clear_has_payload();
    auto* temp = _impl_.payload_.keepalive_ack_;
    _impl_.payload_.keepalive_ack_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Envelope::unsafe_arena_set_allocated_keepalive_ack(::wire::KeepaliveAck* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_keepalive_ack();
    _impl_.payload_.keepalive_ack_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wire.Envelope.keepalive_ack)
}
inline ::wire::KeepaliveAck* Envelope::_internal_mutable_keepalive_ack() {
  if (payload_case() != kKeepaliveAck) {
    clear_payload();
    set_has_keepalive_ack();
    _impl_.payload_.keepalive_ack_ =
        ::google::protobuf::Message::DefaultConstruct<::wire::KeepaliveAck>(GetArena());
  }
  return _impl_.payload_.keepalive_ack_;
}
inline ::wire::KeepaliveAck* Envelope::mutable_keepalive_ack() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::wire::KeepaliveAck* _msg = _internal_mutable_keepalive_ack();
  // @@protoc_insertion_point(field_mutable:wire.Envelope.keepalive_ack)
  return _msg;
}

// .wire.DbQueryResult db_query_result = 12;
inline bool Envelope::has_db_query_result() const {
  return payload_case() == kDbQueryResult;
}
inline bool Envelope::_internal_has_db_query_result() const {
  return payload_case() == kDbQueryResult;
}
inline void Envelope::set_has_db_query_result() {
  _impl_._oneof_case_[0] = kDbQueryResult;
}
inline void Envelope::clear_db_query_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (payload_case() == kDbQueryResult) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.db_query_result_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.db_query_result_);
    }
    clear_has_payload();
  }
}
inline ::wire::DbQueryResult* Envelope::release_db_query_result() {
  // @@protoc_insertion_point(field_release:wire.Envelope.db_query_result)
  if (payload_case() == kDbQueryResult) {
    clear_has_payload();
    auto* temp = _impl_.payload_.db_query_result_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.db_query_result_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::wire::DbQueryResult& Envelope::_internal_db_query_result() const {
  return payload_case() == kDbQueryResult ? *_impl_.payload_.db_query_result_ : reinterpret_cast<::wire::DbQueryResult&>(::wire::_DbQueryResult_default_instance_);
}
inline const ::wire::DbQueryResult& Envelope::db_query_result() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:wire.Envelope.db_query_result)
  return _internal_db_query_result();
}
inline ::wire::DbQueryResult* Envelope::unsafe_arena_release_db_query_result() {
  // @@protoc_insertion_point(field_unsafe_arena_release:wire.Envelope.db_query_result)
  if (payload_case() == kDbQueryResult) {
    clear_has_payload();
    auto* temp = _impl_.payload_.db_query_result_;
    _impl_.payload_.db_query_result_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Envelope::unsafe_arena_set_allocated_db_query_result(::wire::DbQueryResult* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_db_query_result();
    _impl_.payload_.db_query_result_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wire.Envelope.db_query_result)
}
inline ::wire::DbQueryResult* Envelope::_internal_mutable_db_query_result() {
  if (payload_case() != kDbQueryResult) {
    clear_payload();
    set_has_db_query_result();
    _impl_.payload_.db_query_result_ =
        ::google::protobuf::Message::DefaultConstruct<::wire::DbQueryResult>(GetArena());
  }
  return _impl_.payload_.db_query_result_;
}
inline ::wire::DbQueryResult* Envelope::mutable_db_query_result() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::wire::DbQueryResult* _msg = _internal_mutable_db_query_result();
  // @@protoc_insertion_point(field_mutable:wire.Envelope.db_query_result)
  return _msg;
}

// .wire.Error error = 13;
inline bool Envelope::has_error() const {
  return payload_case() == kError;
}
inline bool Envelope::_internal_has_error() const {
  return payload_case() == kError;
}
inline void Envelope::set_has_error() {
  _impl_._oneof_case_[0] = kError;
}
inline void Envelope::clear_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (payload_case() == kError) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.error_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.error_);
    }
    clear_has_payload();
  }
}
inline ::wire::Error* Envelope::release_error() {
  // @@protoc_insertion_point(field_release:wire.Envelope.error)
  if (payload_case() == kError) {
    clear_has_payload();
    auto* temp = _impl_.payload_.error_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::wire::Error& Envelope::_internal_error() const {
  return payload_case() == kError ? *_impl_.payload_.error_ : reinterpret_cast<::wire::Error&>(::wire::_Error_default_instance_);
}
inline const ::wire::Error& Envelope::error() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:wire.Envelope.error)
  return _internal_error();
}
inline ::wire::Error* Envelope::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_unsafe_arena_release:wire.Envelope.error)
  if (payload_case() == kError) {
    clear_has_payload();
    auto* temp = _impl_.payload_.error_;
    _impl_.payload_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Envelope::unsafe_arena_set_allocated_error(::wire::Error* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_error();
    _impl_.payload_.error_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wire.Envelope.error)
}
inline ::wire::Error* Envelope::_internal_mutable_error() {
  if (payload_case() != kError) {
    clear_payload();
    set_has_error();
    _impl_.payload_.error_ =
        ::google::protobuf::Message::DefaultConstruct<::wire::Error>(GetArena());
  }
  return _impl_.payload_.error_;
}
inline ::wire::Error* Envelope::mutable_error() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::wire::Error* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:wire.Envelope.error)
  return _msg;
}

inline bool Envelope::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
inline void Envelope::clear_has_payload() {
  _impl_._oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline Envelope::PayloadCase Envelope::payload_case() const {
  return Envelope::PayloadCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace wire


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::wire::MsgType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::wire::MsgType>() {
  return ::wire::MsgType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // wire_2eproto_2epb_2eh
